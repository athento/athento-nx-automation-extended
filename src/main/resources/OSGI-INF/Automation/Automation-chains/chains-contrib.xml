<?xml version="1.0" encoding="UTF-8"?>

<component name="org.athento.nuxeo.athento-nx-automation-extended.chains"
	version="1.0.0">
	<require>org.nuxeo.runtime.started</require>

	<extension target="org.nuxeo.ecm.core.operation.OperationServiceComponent"
		point="chains">

		<chain id="Document.CreateComment">

			<documentation>
				Creates a new comment to the input document.
				Accepts to parameters, "comment" and "user", given as string.
			</documentation>

			<param type="string" name="comment" />
			<param type="string" name="user" />
			<operation id="Context.FetchDocument" />
			<operation id="Context.SetInputAsVar">
				<param type="string" name="name">commentableDoc</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">comment</param>
				<param type="string" name="value">expr:@{ChainParameters['comment']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">user</param>
				<param type="string" name="value">expr:@{ChainParameters['user']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">cm</param>
				<param type="string" name="value">expr:org.nuxeo.runtime.api.Framework.getService(org.nuxeo.ecm.platform.comment.api.CommentManager)
				</param>
			</operation>
			<operation id="Context.RestoreDocumentInputFromScript">
				<param type="string" name="script">cm.createComment(commentableDoc,comment,user);
				</param>
			</operation>
		</chain>
		
		<chain id="Document.DeleteComment">

			<documentation>
				Delete a Comment given the docid comment via parameter and docid document via input.
			</documentation>
			
			<param type="string" name="commentToDelete" />
			<operation id="Context.FetchDocument" />
			<operation id="Context.SetInputAsVar">
				<param type="string" name="name">commentableDoc</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">commentToDelete</param>
				<param type="string" name="value">expr:@{ChainParameters['commentToDelete']}
				</param>
			</operation>
			<operation id="Document.Fetch">
				<param type="document" name="value">expr:commentToDelete</param>
			</operation>
			<operation id="Context.SetInputAsVar">
				<param type="string" name="name">commentToDeleteDoc</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">cm</param>
				<param type="string" name="value">expr:org.nuxeo.runtime.api.Framework.getService(org.nuxeo.ecm.platform.comment.api.CommentManager)
				</param>
			</operation>
			<operation id="Context.RunScript">
				<param type="string" name="script">cm.deleteComment(commentableDoc,commentToDeleteDoc);commentableDoc.name;</param>
			</operation>
			<operation id="Context.RestoreDocumentsInputFromScript">
				<param type="string" name="script">new org.nuxeo.ecm.core.api.impl.DocumentModelListImpl(cm.getComments(commentableDoc));</param>
			</operation>
			
		</chain>
		
		<chain id="Document.GetAllComments">

			<documentation>
				Get All Comments from a given (input) document.
			</documentation>
			
			<operation id="Context.FetchDocument" />
			<operation id="Context.SetInputAsVar">
				<param type="string" name="name">commentableDoc</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">cm</param>
				<param type="string" name="value">expr:org.nuxeo.runtime.api.Framework.getService(org.nuxeo.ecm.platform.comment.api.CommentManager)
				</param>
			</operation>
			<operation id="Context.RestoreDocumentsInputFromScript">
				<param type="string" name="script">new org.nuxeo.ecm.core.api.impl.DocumentModelListImpl(cm.getComments(commentableDoc));</param>
			</operation>
		</chain>
		
		<chain id="Group.CreateGroup">

			<documentation>
				Creates a new group. In this initial version,
				overriding is not controled.
			</documentation>

			<param type="string" name="name" />
			<operation id="Context.SetVar">
				<param type="string" name="name">name</param>
				<param type="string" name="value">expr:@{ChainParameters['name']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">um</param>
				<param type="string" name="value">expr:org.nuxeo.runtime.api.Framework.getService(org.nuxeo.ecm.platform.usermanager.UserManager)
				</param>
			</operation>
			<operation id="Context.RunScript">
				<param type="string" name="script">um.createGroup(new org.nuxeo.ecm.core.api.impl.NuxeoGroupImpl(name));name;
				</param>
			</operation>
		</chain>
		
		<chain id="Group.CreateGroupWithLabel">

			<documentation>
				Creates a new group. In this initial version,
				overriding is not controled.
				Includes label as second parameter
			</documentation>

			<param type="string" name="name" />
			<param type="string" name="label" />
			<operation id="Context.SetVar">
				<param type="string" name="name">name</param>
				<param type="string" name="value">expr:@{ChainParameters['name']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">label</param>
				<param type="string" name="value">expr:@{ChainParameters['label']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">um</param>
				<param type="string" name="value">expr:org.nuxeo.runtime.api.Framework.getService(org.nuxeo.ecm.platform.usermanager.UserManager)
				</param>
			</operation>
			<operation id="Context.RunScript">
				<param type="string" name="script">um.createGroup(new org.nuxeo.ecm.core.api.impl.NuxeoGroupImpl(name,label));name;
				</param>
			</operation>
		</chain>
		
		<chain id="Athento.DocumentCreate">

			<documentation>
				Extended document creation.
			</documentation>

			<param type="string" name="type" />
			<param type="string" name="name" />
			<param type="properties" name="properties" />
			<param type="string" name="destination" />
			<operation id="Context.SetVar">
				<param type="string" name="name">type</param>
				<param type="string" name="value">expr:@{ChainParameters['type']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">name</param>
				<param type="string" name="value">expr:@{ChainParameters['name']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">properties_var</param>
				<param type="string" name="value">expr:new org.nuxeo.ecm.automation.core.util.Properties(ChainParameters['properties'])
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">destination</param>
				<param type="string" name="value">expr:@{ChainParameters['destination']}
				</param>
			</operation>
			<operation id="Context.RunOperation">
				<param type="string" name="id">Athento.ReadConfig</param>
				<param type="boolean" name="isolate">false</param>
			</operation>
			<operation id="Document.Fetch">
				<param type="document" name="value">expr:destination == empty ? defaultDestination : destination</param>
			</operation>
			<operation id="Document.Create">
				<param type="string" name="type">expr:type</param>
				<param type="string" name="name">expr:name</param>
				<param type="string" name="properties">expr:properties_var</param>
			</operation>
			
		</chain>
		
		<chain id="Athento.ReadConfig">

			<documentation>
				Reads Extended Config.
			</documentation>

			<operation id="Document.Fetch">
				<param type="document" name="value">/ExtendedConfig</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">defaultDestination</param>
				<param type="string" name="value">expr:@{Document["automationExtendedConfig:defaultDestination"]}
				</param>
			</operation>
			
		</chain>

	</extension>

</component>