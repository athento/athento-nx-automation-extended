<?xml version="1.0" encoding="UTF-8"?>

<component name="org.athento.nuxeo.athento-nx-automation-extended.chains"
	version="1.0.0">
	<require>org.nuxeo.runtime.started</require>

	<extension target="org.nuxeo.ecm.core.operation.OperationServiceComponent"
		point="chains">

		<chain id="Athento.DocumentCreate">

			<documentation>
				Extended document creation.
			</documentation>

			<param type="string" name="type" />
			<param type="string" name="name" />
			<param type="properties" name="properties" />
			<param type="string" name="destination" />
			<operation id="Context.SetVar">
				<param type="string" name="name">type</param>
				<param type="string" name="value">expr:@{ChainParameters['type']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">name</param>
				<param type="string" name="value">expr:@{ChainParameters['name']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">properties_var</param>
				<param type="string" name="value">expr:new
					org.nuxeo.ecm.automation.core.util.Properties(ChainParameters['properties'])
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">_properties</param>
				<param type="string" name="value">expr:ChainParameters['properties']
				</param>
			</operation>

			<operation id="Context.SetVar">
				<param type="string" name="name">destination</param>
				<param type="string" name="value">expr:@{ChainParameters['destination']}
				</param>
			</operation>
			<operation id="Context.RunOperation">
				<param type="string" name="id">Athento.ReadConfig</param>
				<param type="boolean" name="isolate">false</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">destination</param>
				<param type="string" name="value">expr:destination == empty ?
					defaultDestination : destination
				</param>
			</operation>
			<!--  TEMPORAL TO DELETE -->
			<operation id="Context.SetVar">
				<param type="string" name="name">param1</param>
				<param type="object" name="value">expr:properties_var["reo:real_estate_code"]
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">param2</param>
				<param type="object" name="value">expr:properties_var["npl:contract"]
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">param3</param>
				<param type="object" name="value">expr:properties_var["npl:expedient"]
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">param4</param>
				<param type="object" name="value">expr:properties_var["npl:warranty_code"]
				</param>
			</operation>
<!-- 
			<operation id="Context.RunOperation">
				<param type="boolean" name="isolate">true</param>
				<param type="string" name="id">expr:documentCreateOperationPre ==
					empty?
					'voidChain':documentCreateOperationPre
				</param>
				<param type="properties" name="parameters">
					expr:properties_1=@{param1}
					properties_2=@{param2}
					properties_3=@{param3}
					properties_4=@{param4}
					basePath=@{destination}
				</param>
			</operation>
-->
			<operation id="Aktua.DocumentFetchOrCreateDestinationFolder">
				<param type="string" name="properties_1">expr:param1</param>
				<param type="string" name="properties_2">expr:param2</param>
				<param type="string" name="properties_3">expr:param3</param>
				<param type="string" name="properties_4">expr:param4</param>
				<param type="string" name="basePath">expr:destination</param>
			</operation>

			<operation id="Document.Create">
				<param type="string" name="type">expr:type</param>
				<param type="string" name="name">expr:name</param>
				<param type="properties" name="properties">expr:properties_var</param>
			</operation>

		</chain>

		<chain id="Athento.DocumentDelete">
			<documentation>
				Extended document delete.
			</documentation>

			<operation id="Context.FetchDocument" />
			<operation id="Document.SetLifeCycle">
				<param type="string" name="value">delete</param>
			</operation>
		</chain>

		<chain id="Athento.DocumentQuery">

			<documentation>
				Extended document Query.
			</documentation>

			<param type="string" name="query" />
			<param type="integer" name="currentPageIndex" />
			<param type="integer" name="pageSize" />
			<param type="string" name="sortOrder" />
			<param type="string" name="sortBy" />
			<operation id="Context.SetVar">
				<param type="string" name="name">query</param>
				<param type="string" name="value">expr:@{ChainParameters['query']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">currentPageIndex</param>
				<param type="integer" name="value">expr:ChainParameters['currentPageIndex']
					== empty ? empty : ChainParameters['currentPageIndex']
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">pageSize</param>
				<param type="integer" name="value">expr:ChainParameters['pageSize'] ==
					empty ? empty : ChainParameters['pageSize']
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">sortOrder</param>
				<param type="string" name="value">expr:@{ChainParameters['sortOrder']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">sortBy</param>
				<param type="string" name="value">expr:@{ChainParameters['sortBy']}
				</param>
			</operation>
			<operation id="Document.Query">
				<param type="string" name="query">expr:query</param>
				<param type="integer" name="currentPageIndex">expr:currentPageIndex == empty ? 0
					: currentPageIndex
				</param>
				<param type="string" name="sortOrder">expr:sortOrder</param>
				<param type="string" name="sortBy">expr:sortBy</param>
				<param type="integer" name="pageSize">expr:pageSize == empty ? 20 :
					pageSize
				</param>
			</operation>

		</chain>

		<chain id="Athento.DocumentQueryDirectory">

			<documentation>
				Extended document delete.
			</documentation>

			<param type="string" name="directory" />
			<param type="string" name="parent" />
			<param type="string" name="grandParent" />
			<operation id="Context.SetVar">
				<param type="string" name="name">directory</param>
				<param type="string" name="value">expr:@{ChainParameters['directory']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">parent</param>
				<param type="string" name="value">expr:@{ChainParameters['parent']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">grandParent</param>
				<param type="string" name="value">expr:@{ChainParameters['grandParent']}
				</param>
			</operation>

		</chain>

		<chain id="Athento.DocumentResultSet">

			<documentation>
				Extended document ResultSet operation.
			</documentation>

			<param type="string" name="query" />
			<param type="integer" name="page" />
			<param type="integer" name="pageSize" />
			<param type="string" name="sortOrder" />
			<param type="string" name="sortBy" />
			<operation id="Context.SetVar">
				<param type="string" name="name">query</param>
				<param type="string" name="value">expr:@{ChainParameters['query']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">page</param>
				<param type="integer" name="value">expr:ChainParameters['page'] ==
					empty ? empty : ChainParameters['page']
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">pageSize</param>
				<param type="integer" name="value">expr:ChainParameters['pageSize'] ==
					empty ? empty : ChainParameters['pageSize']
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">sortOrder</param>
				<param type="string" name="value">expr:@{ChainParameters['sortOrder']}
				</param>
			</operation>

			<operation id="Context.SetVar">
				<param type="string" name="name">sortBy</param>
				<param type="string" name="value">expr:@{ChainParameters['sortBy']}
				</param>
			</operation>
			<operation id="Resultset.PageProvider">
				<param type="string" name="query">expr:query</param>
				<param type="integer" name="page">expr:page == empty ? 0 : page
				</param>
				<param type="string" name="sortOrder">expr:sortOrder</param>
				<param type="string" name="sortBy">expr:sortBy</param>
				<param type="integer" name="pageSize">expr:pageSize == empty ? 20 :
					pageSize
				</param>
			</operation>

		</chain>

		<chain id="Athento.DocumentUpdate">

			<documentation>
				Extended document creation.
			</documentation>

			<param type="properties" name="properties" />
			<param type="boolean" name="updateParent" />
			<param type="boolean" name="save" />
			<operation id="Context.SetVar">
				<param type="string" name="name">properties_var</param>
				<param type="string" name="value">expr:new
					org.nuxeo.ecm.automation.core.util.Properties(ChainParameters['properties'])
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">save</param>
				<param type="boolean" name="value">expr:@{ChainParameters['save']}
				</param>
			</operation>
			<operation id="Context.FetchDocument" />
			<operation id="Document.Update">
				<param type="boolean" name="save">expr:save</param>
				<param type="properties" name="properties">expr:properties_var</param>
			</operation>

		</chain>

		<chain id="Athento.ReadConfig">

			<documentation>
				Reads Extended Config.
			</documentation>

			<operation id="Document.Fetch">
				<param type="document" name="value">/ExtendedConfig</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">defaultDestination</param>
				<param type="string" name="value">expr:@{Document["automationExtendedConfig:defaultDestination"]}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">documentCreateOperationPre</param>
				<param type="string" name="value">expr:@{Document["automationExtendedConfig:documentCreateOperationPre"]}
				</param>
			</operation>
		</chain>

		<chain id="Document.CreateComment">

			<documentation>
				Creates a new comment to the input document.
				Accepts to
				parameters, "comment" and "user", given as string.
			</documentation>

			<param type="string" name="comment" />
			<param type="string" name="user" />
			<operation id="Context.FetchDocument" />
			<operation id="Context.SetInputAsVar">
				<param type="string" name="name">commentableDoc</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">comment</param>
				<param type="string" name="value">expr:@{ChainParameters['comment']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">user</param>
				<param type="string" name="value">expr:@{ChainParameters['user']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">cm</param>
				<param type="string" name="value">expr:org.nuxeo.runtime.api.Framework.getService(org.nuxeo.ecm.platform.comment.api.CommentManager)
				</param>
			</operation>
			<operation id="Context.RestoreDocumentInputFromScript">
				<param type="string" name="script">cm.createComment(commentableDoc,comment,user);
				</param>
			</operation>
		</chain>

		<chain id="Document.DeleteComment">

			<documentation>
				Delete a Comment given the docid comment via parameter
				and docid document via input.
			</documentation>

			<param type="string" name="commentToDelete" />
			<operation id="Context.FetchDocument" />
			<operation id="Context.SetInputAsVar">
				<param type="string" name="name">commentableDoc</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">commentToDelete</param>
				<param type="string" name="value">expr:@{ChainParameters['commentToDelete']}
				</param>
			</operation>
			<operation id="Document.Fetch">
				<param type="document" name="value">expr:commentToDelete</param>
			</operation>
			<operation id="Context.SetInputAsVar">
				<param type="string" name="name">commentToDeleteDoc</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">cm</param>
				<param type="string" name="value">expr:org.nuxeo.runtime.api.Framework.getService(org.nuxeo.ecm.platform.comment.api.CommentManager)
				</param>
			</operation>
			<operation id="Context.RunScript">
				<param type="string" name="script">cm.deleteComment(commentableDoc,commentToDeleteDoc);commentableDoc.name;
				</param>
			</operation>
			<operation id="Context.RestoreDocumentsInputFromScript">
				<param type="string" name="script">new
					org.nuxeo.ecm.core.api.impl.DocumentModelListImpl(cm.getComments(commentableDoc));
				</param>
			</operation>

		</chain>

		<chain id="Document.GetAllComments">

			<documentation>
				Get All Comments from a given (input) document.
			</documentation>

			<operation id="Context.FetchDocument" />
			<operation id="Context.SetInputAsVar">
				<param type="string" name="name">commentableDoc</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">cm</param>
				<param type="string" name="value">expr:org.nuxeo.runtime.api.Framework.getService(org.nuxeo.ecm.platform.comment.api.CommentManager)
				</param>
			</operation>
			<operation id="Context.RestoreDocumentsInputFromScript">
				<param type="string" name="script">new
					org.nuxeo.ecm.core.api.impl.DocumentModelListImpl(cm.getComments(commentableDoc));
				</param>
			</operation>
		</chain>

		<chain id="Group.CreateGroup">

			<documentation>
				Creates a new group. In this initial version,
				overriding is not controled.
			</documentation>

			<param type="string" name="name" />
			<operation id="Context.SetVar">
				<param type="string" name="name">name</param>
				<param type="string" name="value">expr:@{ChainParameters['name']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">um</param>
				<param type="string" name="value">expr:org.nuxeo.runtime.api.Framework.getService(org.nuxeo.ecm.platform.usermanager.UserManager)
				</param>
			</operation>
			<operation id="Context.RunScript">
				<param type="string" name="script">um.createGroup(new
					org.nuxeo.ecm.core.api.impl.NuxeoGroupImpl(name));name;
				</param>
			</operation>
		</chain>

		<chain id="Group.CreateGroupWithLabel">

			<documentation>
				Creates a new group. In this initial version,
				overriding is not controled.
				Includes label as second parameter
			</documentation>

			<param type="string" name="name" />
			<param type="string" name="label" />
			<operation id="Context.SetVar">
				<param type="string" name="name">name</param>
				<param type="string" name="value">expr:@{ChainParameters['name']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">label</param>
				<param type="string" name="value">expr:@{ChainParameters['label']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">um</param>
				<param type="string" name="value">expr:org.nuxeo.runtime.api.Framework.getService(org.nuxeo.ecm.platform.usermanager.UserManager)
				</param>
			</operation>
			<operation id="Context.RunScript">
				<param type="string" name="script">um.createGroup(new
					org.nuxeo.ecm.core.api.impl.NuxeoGroupImpl(name,label));name;
				</param>
			</operation>
		</chain>
		
		<chain id="Athento.Vocabulary.GetChildren">
			<param type="string" name="vocabularyName" />
			<param type="string" name="parentValue" />
			<operation id="Context.SetVar">
				<param type="string" name="name">vocabularyName</param>
				<param type="string" name="value">expr:@{ChainParameters['vocabularyName']}
				</param>
			</operation>
			<operation id="Context.SetVar">
				<param type="string" name="name">parentValue</param>
				<param type="string" name="value">expr:@{ChainParameters['parentValue']}
				</param>
			</operation>

			<operation id="Athento.VocabularyGetChildrenOperation">
				<param type="string" name="vocabularyName">expr:vocabularyName</param>
				<param type="string" name="parentValue">expr:parentValue</param>
			</operation>
		</chain>
		
		<chain id="voidChain">
			<operation id="LogOperation">
				<param type="string" name="level">debug</param>
				<param type="string" name="message">voidChain invoked
				</param>
			</operation>
		</chain>

	</extension>

</component>